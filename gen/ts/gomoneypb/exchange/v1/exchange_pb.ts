// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file gomoneypb/exchange/v1/exchange.proto (package gomoneypb.exchange.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message gomoneypb.exchange.v1.ExchangeCurrencyRequest
 */
export class ExchangeCurrencyRequest extends Message<ExchangeCurrencyRequest> {
  /**
   * @generated from field: string from_currency = 1;
   */
  fromCurrency = "";

  /**
   * @generated from field: string to_currency = 2;
   */
  toCurrency = "";

  /**
   * @generated from field: string amount = 3;
   */
  amount = "";

  constructor(data?: PartialMessage<ExchangeCurrencyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gomoneypb.exchange.v1.ExchangeCurrencyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "from_currency", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "to_currency", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExchangeCurrencyRequest {
    return new ExchangeCurrencyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExchangeCurrencyRequest {
    return new ExchangeCurrencyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExchangeCurrencyRequest {
    return new ExchangeCurrencyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ExchangeCurrencyRequest | PlainMessage<ExchangeCurrencyRequest> | undefined, b: ExchangeCurrencyRequest | PlainMessage<ExchangeCurrencyRequest> | undefined): boolean {
    return proto3.util.equals(ExchangeCurrencyRequest, a, b);
  }
}

/**
 * @generated from message gomoneypb.exchange.v1.ExchangeCurrencyResponse
 */
export class ExchangeCurrencyResponse extends Message<ExchangeCurrencyResponse> {
  /**
   * @generated from field: string amount = 1;
   */
  amount = "";

  constructor(data?: PartialMessage<ExchangeCurrencyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gomoneypb.exchange.v1.ExchangeCurrencyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExchangeCurrencyResponse {
    return new ExchangeCurrencyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExchangeCurrencyResponse {
    return new ExchangeCurrencyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExchangeCurrencyResponse {
    return new ExchangeCurrencyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ExchangeCurrencyResponse | PlainMessage<ExchangeCurrencyResponse> | undefined, b: ExchangeCurrencyResponse | PlainMessage<ExchangeCurrencyResponse> | undefined): boolean {
    return proto3.util.equals(ExchangeCurrencyResponse, a, b);
  }
}

