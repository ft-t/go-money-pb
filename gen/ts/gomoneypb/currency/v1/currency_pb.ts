// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file gomoneypb/currency/v1/currency.proto (package gomoneypb.currency.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message gomoneypb.currency.v1.ExchangeRequest
 */
export class ExchangeRequest extends Message<ExchangeRequest> {
  /**
   * @generated from field: string from_currency = 1;
   */
  fromCurrency = "";

  /**
   * @generated from field: string to_currency = 2;
   */
  toCurrency = "";

  /**
   * @generated from field: string amount = 3;
   */
  amount = "";

  constructor(data?: PartialMessage<ExchangeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gomoneypb.currency.v1.ExchangeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "from_currency", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "to_currency", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExchangeRequest {
    return new ExchangeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExchangeRequest {
    return new ExchangeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExchangeRequest {
    return new ExchangeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ExchangeRequest | PlainMessage<ExchangeRequest> | undefined, b: ExchangeRequest | PlainMessage<ExchangeRequest> | undefined): boolean {
    return proto3.util.equals(ExchangeRequest, a, b);
  }
}

/**
 * @generated from message gomoneypb.currency.v1.ExchangeResponse
 */
export class ExchangeResponse extends Message<ExchangeResponse> {
  /**
   * @generated from field: string amount = 1;
   */
  amount = "";

  constructor(data?: PartialMessage<ExchangeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gomoneypb.currency.v1.ExchangeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExchangeResponse {
    return new ExchangeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExchangeResponse {
    return new ExchangeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExchangeResponse {
    return new ExchangeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ExchangeResponse | PlainMessage<ExchangeResponse> | undefined, b: ExchangeResponse | PlainMessage<ExchangeResponse> | undefined): boolean {
    return proto3.util.equals(ExchangeResponse, a, b);
  }
}

