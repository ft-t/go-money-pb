// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: gomoneypb/configuration/v1/configuration.proto

package accountsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ft-t/go-money-pb/gen/gomoneypb/configuration/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ConfigurationServiceName is the fully-qualified name of the ConfigurationService service.
	ConfigurationServiceName = "gomoneypb.accounts.v1.ConfigurationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ConfigurationServiceGetConfigurationProcedure is the fully-qualified name of the
	// ConfigurationService's GetConfiguration RPC.
	ConfigurationServiceGetConfigurationProcedure = "/gomoneypb.accounts.v1.ConfigurationService/GetConfiguration"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	configurationServiceServiceDescriptor                = v1.File_gomoneypb_configuration_v1_configuration_proto.Services().ByName("ConfigurationService")
	configurationServiceGetConfigurationMethodDescriptor = configurationServiceServiceDescriptor.Methods().ByName("GetConfiguration")
)

// ConfigurationServiceClient is a client for the gomoneypb.accounts.v1.ConfigurationService
// service.
type ConfigurationServiceClient interface {
	GetConfiguration(context.Context, *connect.Request[v1.GetConfigurationRequest]) (*connect.Response[v1.GetConfigurationResponse], error)
}

// NewConfigurationServiceClient constructs a client for the
// gomoneypb.accounts.v1.ConfigurationService service. By default, it uses the Connect protocol with
// the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To use
// the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewConfigurationServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ConfigurationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &configurationServiceClient{
		getConfiguration: connect.NewClient[v1.GetConfigurationRequest, v1.GetConfigurationResponse](
			httpClient,
			baseURL+ConfigurationServiceGetConfigurationProcedure,
			connect.WithSchema(configurationServiceGetConfigurationMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// configurationServiceClient implements ConfigurationServiceClient.
type configurationServiceClient struct {
	getConfiguration *connect.Client[v1.GetConfigurationRequest, v1.GetConfigurationResponse]
}

// GetConfiguration calls gomoneypb.accounts.v1.ConfigurationService.GetConfiguration.
func (c *configurationServiceClient) GetConfiguration(ctx context.Context, req *connect.Request[v1.GetConfigurationRequest]) (*connect.Response[v1.GetConfigurationResponse], error) {
	return c.getConfiguration.CallUnary(ctx, req)
}

// ConfigurationServiceHandler is an implementation of the
// gomoneypb.accounts.v1.ConfigurationService service.
type ConfigurationServiceHandler interface {
	GetConfiguration(context.Context, *connect.Request[v1.GetConfigurationRequest]) (*connect.Response[v1.GetConfigurationResponse], error)
}

// NewConfigurationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewConfigurationServiceHandler(svc ConfigurationServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	configurationServiceGetConfigurationHandler := connect.NewUnaryHandler(
		ConfigurationServiceGetConfigurationProcedure,
		svc.GetConfiguration,
		connect.WithSchema(configurationServiceGetConfigurationMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/gomoneypb.accounts.v1.ConfigurationService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ConfigurationServiceGetConfigurationProcedure:
			configurationServiceGetConfigurationHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedConfigurationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedConfigurationServiceHandler struct{}

func (UnimplementedConfigurationServiceHandler) GetConfiguration(context.Context, *connect.Request[v1.GetConfigurationRequest]) (*connect.Response[v1.GetConfigurationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gomoneypb.accounts.v1.ConfigurationService.GetConfiguration is not implemented"))
}
