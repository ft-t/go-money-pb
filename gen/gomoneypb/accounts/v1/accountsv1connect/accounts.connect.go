// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: gomoneypb/accounts/v1/accounts.proto

package accountsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ft-t/go-money-pb/gen/gomoneypb/accounts/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AccountsServiceName is the fully-qualified name of the AccountsService service.
	AccountsServiceName = "gomoneypb.accounts.v1.AccountsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AccountsServiceCreateAccountProcedure is the fully-qualified name of the AccountsService's
	// CreateAccount RPC.
	AccountsServiceCreateAccountProcedure = "/gomoneypb.accounts.v1.AccountsService/CreateAccount"
	// AccountsServiceUpdateAccountProcedure is the fully-qualified name of the AccountsService's
	// UpdateAccount RPC.
	AccountsServiceUpdateAccountProcedure = "/gomoneypb.accounts.v1.AccountsService/UpdateAccount"
	// AccountsServiceDeleteAccountProcedure is the fully-qualified name of the AccountsService's
	// DeleteAccount RPC.
	AccountsServiceDeleteAccountProcedure = "/gomoneypb.accounts.v1.AccountsService/DeleteAccount"
	// AccountsServiceListAccountsProcedure is the fully-qualified name of the AccountsService's
	// ListAccounts RPC.
	AccountsServiceListAccountsProcedure = "/gomoneypb.accounts.v1.AccountsService/ListAccounts"
	// AccountsServiceReorderAccountsProcedure is the fully-qualified name of the AccountsService's
	// ReorderAccounts RPC.
	AccountsServiceReorderAccountsProcedure = "/gomoneypb.accounts.v1.AccountsService/ReorderAccounts"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	accountsServiceServiceDescriptor               = v1.File_gomoneypb_accounts_v1_accounts_proto.Services().ByName("AccountsService")
	accountsServiceCreateAccountMethodDescriptor   = accountsServiceServiceDescriptor.Methods().ByName("CreateAccount")
	accountsServiceUpdateAccountMethodDescriptor   = accountsServiceServiceDescriptor.Methods().ByName("UpdateAccount")
	accountsServiceDeleteAccountMethodDescriptor   = accountsServiceServiceDescriptor.Methods().ByName("DeleteAccount")
	accountsServiceListAccountsMethodDescriptor    = accountsServiceServiceDescriptor.Methods().ByName("ListAccounts")
	accountsServiceReorderAccountsMethodDescriptor = accountsServiceServiceDescriptor.Methods().ByName("ReorderAccounts")
)

// AccountsServiceClient is a client for the gomoneypb.accounts.v1.AccountsService service.
type AccountsServiceClient interface {
	CreateAccount(context.Context, *connect.Request[v1.CreateAccountRequest]) (*connect.Response[v1.CreateAccountResponse], error)
	UpdateAccount(context.Context, *connect.Request[v1.UpdateAccountRequest]) (*connect.Response[v1.UpdateAccountResponse], error)
	DeleteAccount(context.Context, *connect.Request[v1.DeleteAccountRequest]) (*connect.Response[v1.DeleteAccountResponse], error)
	ListAccounts(context.Context, *connect.Request[v1.ListAccountsRequest]) (*connect.Response[v1.ListAccountsResponse], error)
	ReorderAccounts(context.Context, *connect.Request[v1.ReorderAccountsRequest]) (*connect.Response[v1.ReorderAccountsResponse], error)
}

// NewAccountsServiceClient constructs a client for the gomoneypb.accounts.v1.AccountsService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAccountsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AccountsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &accountsServiceClient{
		createAccount: connect.NewClient[v1.CreateAccountRequest, v1.CreateAccountResponse](
			httpClient,
			baseURL+AccountsServiceCreateAccountProcedure,
			connect.WithSchema(accountsServiceCreateAccountMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateAccount: connect.NewClient[v1.UpdateAccountRequest, v1.UpdateAccountResponse](
			httpClient,
			baseURL+AccountsServiceUpdateAccountProcedure,
			connect.WithSchema(accountsServiceUpdateAccountMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteAccount: connect.NewClient[v1.DeleteAccountRequest, v1.DeleteAccountResponse](
			httpClient,
			baseURL+AccountsServiceDeleteAccountProcedure,
			connect.WithSchema(accountsServiceDeleteAccountMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listAccounts: connect.NewClient[v1.ListAccountsRequest, v1.ListAccountsResponse](
			httpClient,
			baseURL+AccountsServiceListAccountsProcedure,
			connect.WithSchema(accountsServiceListAccountsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		reorderAccounts: connect.NewClient[v1.ReorderAccountsRequest, v1.ReorderAccountsResponse](
			httpClient,
			baseURL+AccountsServiceReorderAccountsProcedure,
			connect.WithSchema(accountsServiceReorderAccountsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// accountsServiceClient implements AccountsServiceClient.
type accountsServiceClient struct {
	createAccount   *connect.Client[v1.CreateAccountRequest, v1.CreateAccountResponse]
	updateAccount   *connect.Client[v1.UpdateAccountRequest, v1.UpdateAccountResponse]
	deleteAccount   *connect.Client[v1.DeleteAccountRequest, v1.DeleteAccountResponse]
	listAccounts    *connect.Client[v1.ListAccountsRequest, v1.ListAccountsResponse]
	reorderAccounts *connect.Client[v1.ReorderAccountsRequest, v1.ReorderAccountsResponse]
}

// CreateAccount calls gomoneypb.accounts.v1.AccountsService.CreateAccount.
func (c *accountsServiceClient) CreateAccount(ctx context.Context, req *connect.Request[v1.CreateAccountRequest]) (*connect.Response[v1.CreateAccountResponse], error) {
	return c.createAccount.CallUnary(ctx, req)
}

// UpdateAccount calls gomoneypb.accounts.v1.AccountsService.UpdateAccount.
func (c *accountsServiceClient) UpdateAccount(ctx context.Context, req *connect.Request[v1.UpdateAccountRequest]) (*connect.Response[v1.UpdateAccountResponse], error) {
	return c.updateAccount.CallUnary(ctx, req)
}

// DeleteAccount calls gomoneypb.accounts.v1.AccountsService.DeleteAccount.
func (c *accountsServiceClient) DeleteAccount(ctx context.Context, req *connect.Request[v1.DeleteAccountRequest]) (*connect.Response[v1.DeleteAccountResponse], error) {
	return c.deleteAccount.CallUnary(ctx, req)
}

// ListAccounts calls gomoneypb.accounts.v1.AccountsService.ListAccounts.
func (c *accountsServiceClient) ListAccounts(ctx context.Context, req *connect.Request[v1.ListAccountsRequest]) (*connect.Response[v1.ListAccountsResponse], error) {
	return c.listAccounts.CallUnary(ctx, req)
}

// ReorderAccounts calls gomoneypb.accounts.v1.AccountsService.ReorderAccounts.
func (c *accountsServiceClient) ReorderAccounts(ctx context.Context, req *connect.Request[v1.ReorderAccountsRequest]) (*connect.Response[v1.ReorderAccountsResponse], error) {
	return c.reorderAccounts.CallUnary(ctx, req)
}

// AccountsServiceHandler is an implementation of the gomoneypb.accounts.v1.AccountsService service.
type AccountsServiceHandler interface {
	CreateAccount(context.Context, *connect.Request[v1.CreateAccountRequest]) (*connect.Response[v1.CreateAccountResponse], error)
	UpdateAccount(context.Context, *connect.Request[v1.UpdateAccountRequest]) (*connect.Response[v1.UpdateAccountResponse], error)
	DeleteAccount(context.Context, *connect.Request[v1.DeleteAccountRequest]) (*connect.Response[v1.DeleteAccountResponse], error)
	ListAccounts(context.Context, *connect.Request[v1.ListAccountsRequest]) (*connect.Response[v1.ListAccountsResponse], error)
	ReorderAccounts(context.Context, *connect.Request[v1.ReorderAccountsRequest]) (*connect.Response[v1.ReorderAccountsResponse], error)
}

// NewAccountsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAccountsServiceHandler(svc AccountsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	accountsServiceCreateAccountHandler := connect.NewUnaryHandler(
		AccountsServiceCreateAccountProcedure,
		svc.CreateAccount,
		connect.WithSchema(accountsServiceCreateAccountMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	accountsServiceUpdateAccountHandler := connect.NewUnaryHandler(
		AccountsServiceUpdateAccountProcedure,
		svc.UpdateAccount,
		connect.WithSchema(accountsServiceUpdateAccountMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	accountsServiceDeleteAccountHandler := connect.NewUnaryHandler(
		AccountsServiceDeleteAccountProcedure,
		svc.DeleteAccount,
		connect.WithSchema(accountsServiceDeleteAccountMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	accountsServiceListAccountsHandler := connect.NewUnaryHandler(
		AccountsServiceListAccountsProcedure,
		svc.ListAccounts,
		connect.WithSchema(accountsServiceListAccountsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	accountsServiceReorderAccountsHandler := connect.NewUnaryHandler(
		AccountsServiceReorderAccountsProcedure,
		svc.ReorderAccounts,
		connect.WithSchema(accountsServiceReorderAccountsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/gomoneypb.accounts.v1.AccountsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AccountsServiceCreateAccountProcedure:
			accountsServiceCreateAccountHandler.ServeHTTP(w, r)
		case AccountsServiceUpdateAccountProcedure:
			accountsServiceUpdateAccountHandler.ServeHTTP(w, r)
		case AccountsServiceDeleteAccountProcedure:
			accountsServiceDeleteAccountHandler.ServeHTTP(w, r)
		case AccountsServiceListAccountsProcedure:
			accountsServiceListAccountsHandler.ServeHTTP(w, r)
		case AccountsServiceReorderAccountsProcedure:
			accountsServiceReorderAccountsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAccountsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAccountsServiceHandler struct{}

func (UnimplementedAccountsServiceHandler) CreateAccount(context.Context, *connect.Request[v1.CreateAccountRequest]) (*connect.Response[v1.CreateAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gomoneypb.accounts.v1.AccountsService.CreateAccount is not implemented"))
}

func (UnimplementedAccountsServiceHandler) UpdateAccount(context.Context, *connect.Request[v1.UpdateAccountRequest]) (*connect.Response[v1.UpdateAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gomoneypb.accounts.v1.AccountsService.UpdateAccount is not implemented"))
}

func (UnimplementedAccountsServiceHandler) DeleteAccount(context.Context, *connect.Request[v1.DeleteAccountRequest]) (*connect.Response[v1.DeleteAccountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gomoneypb.accounts.v1.AccountsService.DeleteAccount is not implemented"))
}

func (UnimplementedAccountsServiceHandler) ListAccounts(context.Context, *connect.Request[v1.ListAccountsRequest]) (*connect.Response[v1.ListAccountsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gomoneypb.accounts.v1.AccountsService.ListAccounts is not implemented"))
}

func (UnimplementedAccountsServiceHandler) ReorderAccounts(context.Context, *connect.Request[v1.ReorderAccountsRequest]) (*connect.Response[v1.ReorderAccountsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gomoneypb.accounts.v1.AccountsService.ReorderAccounts is not implemented"))
}
