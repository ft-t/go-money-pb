// Code generated by MockGen. DO NOT EDIT.
// Source: ./gomoneypb/currency/v1/currencyv1connect/currency.connect.go

// Package currencyv1connect is a generated GoMock package.
package currencyv1connect

import (
	context "context"
	reflect "reflect"

	connect "connectrpc.com/connect"
	v1 "github.com/ft-t/go-money-pb/gen/gomoneypb/currency/v1"
	gomock "github.com/golang/mock/gomock"
)

// MockCurrencyServiceClient is a mock of CurrencyServiceClient interface.
type MockCurrencyServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCurrencyServiceClientMockRecorder
}

// MockCurrencyServiceClientMockRecorder is the mock recorder for MockCurrencyServiceClient.
type MockCurrencyServiceClientMockRecorder struct {
	mock *MockCurrencyServiceClient
}

// NewMockCurrencyServiceClient creates a new mock instance.
func NewMockCurrencyServiceClient(ctrl *gomock.Controller) *MockCurrencyServiceClient {
	mock := &MockCurrencyServiceClient{ctrl: ctrl}
	mock.recorder = &MockCurrencyServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrencyServiceClient) EXPECT() *MockCurrencyServiceClientMockRecorder {
	return m.recorder
}

// Exchange mocks base method.
func (m *MockCurrencyServiceClient) Exchange(arg0 context.Context, arg1 *connect.Request[v1.ExchangeRequest]) (*connect.Response[v1.ExchangeResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exchange", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ExchangeResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exchange indicates an expected call of Exchange.
func (mr *MockCurrencyServiceClientMockRecorder) Exchange(arg0, arg1 interface{}) *CurrencyServiceClientExchangeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exchange", reflect.TypeOf((*MockCurrencyServiceClient)(nil).Exchange), arg0, arg1)
	return &CurrencyServiceClientExchangeCall{Call: call}
}

// CurrencyServiceClientExchangeCall wrap *gomock.Call
type CurrencyServiceClientExchangeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *CurrencyServiceClientExchangeCall) Return(arg0 *connect.Response[v1.ExchangeResponse], arg1 error) *CurrencyServiceClientExchangeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *CurrencyServiceClientExchangeCall) Do(f func(context.Context, *connect.Request[v1.ExchangeRequest]) (*connect.Response[v1.ExchangeResponse], error)) *CurrencyServiceClientExchangeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *CurrencyServiceClientExchangeCall) DoAndReturn(f func(context.Context, *connect.Request[v1.ExchangeRequest]) (*connect.Response[v1.ExchangeResponse], error)) *CurrencyServiceClientExchangeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCurrencyServiceHandler is a mock of CurrencyServiceHandler interface.
type MockCurrencyServiceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockCurrencyServiceHandlerMockRecorder
}

// MockCurrencyServiceHandlerMockRecorder is the mock recorder for MockCurrencyServiceHandler.
type MockCurrencyServiceHandlerMockRecorder struct {
	mock *MockCurrencyServiceHandler
}

// NewMockCurrencyServiceHandler creates a new mock instance.
func NewMockCurrencyServiceHandler(ctrl *gomock.Controller) *MockCurrencyServiceHandler {
	mock := &MockCurrencyServiceHandler{ctrl: ctrl}
	mock.recorder = &MockCurrencyServiceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrencyServiceHandler) EXPECT() *MockCurrencyServiceHandlerMockRecorder {
	return m.recorder
}

// Exchange mocks base method.
func (m *MockCurrencyServiceHandler) Exchange(arg0 context.Context, arg1 *connect.Request[v1.ExchangeRequest]) (*connect.Response[v1.ExchangeResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exchange", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ExchangeResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exchange indicates an expected call of Exchange.
func (mr *MockCurrencyServiceHandlerMockRecorder) Exchange(arg0, arg1 interface{}) *CurrencyServiceHandlerExchangeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exchange", reflect.TypeOf((*MockCurrencyServiceHandler)(nil).Exchange), arg0, arg1)
	return &CurrencyServiceHandlerExchangeCall{Call: call}
}

// CurrencyServiceHandlerExchangeCall wrap *gomock.Call
type CurrencyServiceHandlerExchangeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *CurrencyServiceHandlerExchangeCall) Return(arg0 *connect.Response[v1.ExchangeResponse], arg1 error) *CurrencyServiceHandlerExchangeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *CurrencyServiceHandlerExchangeCall) Do(f func(context.Context, *connect.Request[v1.ExchangeRequest]) (*connect.Response[v1.ExchangeResponse], error)) *CurrencyServiceHandlerExchangeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *CurrencyServiceHandlerExchangeCall) DoAndReturn(f func(context.Context, *connect.Request[v1.ExchangeRequest]) (*connect.Response[v1.ExchangeResponse], error)) *CurrencyServiceHandlerExchangeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
