// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: gomoneypb/currency/v1/currency.proto

package currencyv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ft-t/go-money-pb/gen/gomoneypb/currency/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CurrencyServiceName is the fully-qualified name of the CurrencyService service.
	CurrencyServiceName = "gomoneypb.currency.v1.CurrencyService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CurrencyServiceExchangeProcedure is the fully-qualified name of the CurrencyService's Exchange
	// RPC.
	CurrencyServiceExchangeProcedure = "/gomoneypb.currency.v1.CurrencyService/Exchange"
	// CurrencyServiceGetCurrenciesProcedure is the fully-qualified name of the CurrencyService's
	// GetCurrencies RPC.
	CurrencyServiceGetCurrenciesProcedure = "/gomoneypb.currency.v1.CurrencyService/GetCurrencies"
	// CurrencyServiceCreateCurrencyProcedure is the fully-qualified name of the CurrencyService's
	// CreateCurrency RPC.
	CurrencyServiceCreateCurrencyProcedure = "/gomoneypb.currency.v1.CurrencyService/CreateCurrency"
	// CurrencyServiceUpdateCurrencyProcedure is the fully-qualified name of the CurrencyService's
	// UpdateCurrency RPC.
	CurrencyServiceUpdateCurrencyProcedure = "/gomoneypb.currency.v1.CurrencyService/UpdateCurrency"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	currencyServiceServiceDescriptor              = v1.File_gomoneypb_currency_v1_currency_proto.Services().ByName("CurrencyService")
	currencyServiceExchangeMethodDescriptor       = currencyServiceServiceDescriptor.Methods().ByName("Exchange")
	currencyServiceGetCurrenciesMethodDescriptor  = currencyServiceServiceDescriptor.Methods().ByName("GetCurrencies")
	currencyServiceCreateCurrencyMethodDescriptor = currencyServiceServiceDescriptor.Methods().ByName("CreateCurrency")
	currencyServiceUpdateCurrencyMethodDescriptor = currencyServiceServiceDescriptor.Methods().ByName("UpdateCurrency")
)

// CurrencyServiceClient is a client for the gomoneypb.currency.v1.CurrencyService service.
type CurrencyServiceClient interface {
	Exchange(context.Context, *connect.Request[v1.ExchangeRequest]) (*connect.Response[v1.ExchangeResponse], error)
	GetCurrencies(context.Context, *connect.Request[v1.GetCurrenciesRequest]) (*connect.Response[v1.GetCurrenciesResponse], error)
	CreateCurrency(context.Context, *connect.Request[v1.CreateCurrencyRequest]) (*connect.Response[v1.CreateCurrencyResponse], error)
	UpdateCurrency(context.Context, *connect.Request[v1.UpdateCurrencyRequest]) (*connect.Response[v1.UpdateCurrencyResponse], error)
}

// NewCurrencyServiceClient constructs a client for the gomoneypb.currency.v1.CurrencyService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCurrencyServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CurrencyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &currencyServiceClient{
		exchange: connect.NewClient[v1.ExchangeRequest, v1.ExchangeResponse](
			httpClient,
			baseURL+CurrencyServiceExchangeProcedure,
			connect.WithSchema(currencyServiceExchangeMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getCurrencies: connect.NewClient[v1.GetCurrenciesRequest, v1.GetCurrenciesResponse](
			httpClient,
			baseURL+CurrencyServiceGetCurrenciesProcedure,
			connect.WithSchema(currencyServiceGetCurrenciesMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createCurrency: connect.NewClient[v1.CreateCurrencyRequest, v1.CreateCurrencyResponse](
			httpClient,
			baseURL+CurrencyServiceCreateCurrencyProcedure,
			connect.WithSchema(currencyServiceCreateCurrencyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateCurrency: connect.NewClient[v1.UpdateCurrencyRequest, v1.UpdateCurrencyResponse](
			httpClient,
			baseURL+CurrencyServiceUpdateCurrencyProcedure,
			connect.WithSchema(currencyServiceUpdateCurrencyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// currencyServiceClient implements CurrencyServiceClient.
type currencyServiceClient struct {
	exchange       *connect.Client[v1.ExchangeRequest, v1.ExchangeResponse]
	getCurrencies  *connect.Client[v1.GetCurrenciesRequest, v1.GetCurrenciesResponse]
	createCurrency *connect.Client[v1.CreateCurrencyRequest, v1.CreateCurrencyResponse]
	updateCurrency *connect.Client[v1.UpdateCurrencyRequest, v1.UpdateCurrencyResponse]
}

// Exchange calls gomoneypb.currency.v1.CurrencyService.Exchange.
func (c *currencyServiceClient) Exchange(ctx context.Context, req *connect.Request[v1.ExchangeRequest]) (*connect.Response[v1.ExchangeResponse], error) {
	return c.exchange.CallUnary(ctx, req)
}

// GetCurrencies calls gomoneypb.currency.v1.CurrencyService.GetCurrencies.
func (c *currencyServiceClient) GetCurrencies(ctx context.Context, req *connect.Request[v1.GetCurrenciesRequest]) (*connect.Response[v1.GetCurrenciesResponse], error) {
	return c.getCurrencies.CallUnary(ctx, req)
}

// CreateCurrency calls gomoneypb.currency.v1.CurrencyService.CreateCurrency.
func (c *currencyServiceClient) CreateCurrency(ctx context.Context, req *connect.Request[v1.CreateCurrencyRequest]) (*connect.Response[v1.CreateCurrencyResponse], error) {
	return c.createCurrency.CallUnary(ctx, req)
}

// UpdateCurrency calls gomoneypb.currency.v1.CurrencyService.UpdateCurrency.
func (c *currencyServiceClient) UpdateCurrency(ctx context.Context, req *connect.Request[v1.UpdateCurrencyRequest]) (*connect.Response[v1.UpdateCurrencyResponse], error) {
	return c.updateCurrency.CallUnary(ctx, req)
}

// CurrencyServiceHandler is an implementation of the gomoneypb.currency.v1.CurrencyService service.
type CurrencyServiceHandler interface {
	Exchange(context.Context, *connect.Request[v1.ExchangeRequest]) (*connect.Response[v1.ExchangeResponse], error)
	GetCurrencies(context.Context, *connect.Request[v1.GetCurrenciesRequest]) (*connect.Response[v1.GetCurrenciesResponse], error)
	CreateCurrency(context.Context, *connect.Request[v1.CreateCurrencyRequest]) (*connect.Response[v1.CreateCurrencyResponse], error)
	UpdateCurrency(context.Context, *connect.Request[v1.UpdateCurrencyRequest]) (*connect.Response[v1.UpdateCurrencyResponse], error)
}

// NewCurrencyServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCurrencyServiceHandler(svc CurrencyServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	currencyServiceExchangeHandler := connect.NewUnaryHandler(
		CurrencyServiceExchangeProcedure,
		svc.Exchange,
		connect.WithSchema(currencyServiceExchangeMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	currencyServiceGetCurrenciesHandler := connect.NewUnaryHandler(
		CurrencyServiceGetCurrenciesProcedure,
		svc.GetCurrencies,
		connect.WithSchema(currencyServiceGetCurrenciesMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	currencyServiceCreateCurrencyHandler := connect.NewUnaryHandler(
		CurrencyServiceCreateCurrencyProcedure,
		svc.CreateCurrency,
		connect.WithSchema(currencyServiceCreateCurrencyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	currencyServiceUpdateCurrencyHandler := connect.NewUnaryHandler(
		CurrencyServiceUpdateCurrencyProcedure,
		svc.UpdateCurrency,
		connect.WithSchema(currencyServiceUpdateCurrencyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/gomoneypb.currency.v1.CurrencyService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CurrencyServiceExchangeProcedure:
			currencyServiceExchangeHandler.ServeHTTP(w, r)
		case CurrencyServiceGetCurrenciesProcedure:
			currencyServiceGetCurrenciesHandler.ServeHTTP(w, r)
		case CurrencyServiceCreateCurrencyProcedure:
			currencyServiceCreateCurrencyHandler.ServeHTTP(w, r)
		case CurrencyServiceUpdateCurrencyProcedure:
			currencyServiceUpdateCurrencyHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCurrencyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCurrencyServiceHandler struct{}

func (UnimplementedCurrencyServiceHandler) Exchange(context.Context, *connect.Request[v1.ExchangeRequest]) (*connect.Response[v1.ExchangeResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gomoneypb.currency.v1.CurrencyService.Exchange is not implemented"))
}

func (UnimplementedCurrencyServiceHandler) GetCurrencies(context.Context, *connect.Request[v1.GetCurrenciesRequest]) (*connect.Response[v1.GetCurrenciesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gomoneypb.currency.v1.CurrencyService.GetCurrencies is not implemented"))
}

func (UnimplementedCurrencyServiceHandler) CreateCurrency(context.Context, *connect.Request[v1.CreateCurrencyRequest]) (*connect.Response[v1.CreateCurrencyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gomoneypb.currency.v1.CurrencyService.CreateCurrency is not implemented"))
}

func (UnimplementedCurrencyServiceHandler) UpdateCurrency(context.Context, *connect.Request[v1.UpdateCurrencyRequest]) (*connect.Response[v1.UpdateCurrencyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gomoneypb.currency.v1.CurrencyService.UpdateCurrency is not implemented"))
}
