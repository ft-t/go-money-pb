// Code generated by MockGen. DO NOT EDIT.
// Source: ./gomoneypb/exchange/v1/exchangev1connect/exchange.connect.go

// Package exchangev1connect is a generated GoMock package.
package exchangev1connect

import (
	context "context"
	reflect "reflect"

	connect "connectrpc.com/connect"
	v1 "github.com/ft-t/go-money-pb/gen/gomoneypb/exchange/v1"
	gomock "github.com/golang/mock/gomock"
)

// MockExchangeServiceClient is a mock of ExchangeServiceClient interface.
type MockExchangeServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeServiceClientMockRecorder
}

// MockExchangeServiceClientMockRecorder is the mock recorder for MockExchangeServiceClient.
type MockExchangeServiceClientMockRecorder struct {
	mock *MockExchangeServiceClient
}

// NewMockExchangeServiceClient creates a new mock instance.
func NewMockExchangeServiceClient(ctrl *gomock.Controller) *MockExchangeServiceClient {
	mock := &MockExchangeServiceClient{ctrl: ctrl}
	mock.recorder = &MockExchangeServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangeServiceClient) EXPECT() *MockExchangeServiceClientMockRecorder {
	return m.recorder
}

// ExchangeCurrency mocks base method.
func (m *MockExchangeServiceClient) ExchangeCurrency(arg0 context.Context, arg1 *connect.Request[v1.ExchangeCurrencyRequest]) (*connect.Response[v1.ExchangeCurrencyResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeCurrency", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ExchangeCurrencyResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExchangeCurrency indicates an expected call of ExchangeCurrency.
func (mr *MockExchangeServiceClientMockRecorder) ExchangeCurrency(arg0, arg1 interface{}) *ExchangeServiceClientExchangeCurrencyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeCurrency", reflect.TypeOf((*MockExchangeServiceClient)(nil).ExchangeCurrency), arg0, arg1)
	return &ExchangeServiceClientExchangeCurrencyCall{Call: call}
}

// ExchangeServiceClientExchangeCurrencyCall wrap *gomock.Call
type ExchangeServiceClientExchangeCurrencyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ExchangeServiceClientExchangeCurrencyCall) Return(arg0 *connect.Response[v1.ExchangeCurrencyResponse], arg1 error) *ExchangeServiceClientExchangeCurrencyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ExchangeServiceClientExchangeCurrencyCall) Do(f func(context.Context, *connect.Request[v1.ExchangeCurrencyRequest]) (*connect.Response[v1.ExchangeCurrencyResponse], error)) *ExchangeServiceClientExchangeCurrencyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ExchangeServiceClientExchangeCurrencyCall) DoAndReturn(f func(context.Context, *connect.Request[v1.ExchangeCurrencyRequest]) (*connect.Response[v1.ExchangeCurrencyResponse], error)) *ExchangeServiceClientExchangeCurrencyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockExchangeServiceHandler is a mock of ExchangeServiceHandler interface.
type MockExchangeServiceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeServiceHandlerMockRecorder
}

// MockExchangeServiceHandlerMockRecorder is the mock recorder for MockExchangeServiceHandler.
type MockExchangeServiceHandlerMockRecorder struct {
	mock *MockExchangeServiceHandler
}

// NewMockExchangeServiceHandler creates a new mock instance.
func NewMockExchangeServiceHandler(ctrl *gomock.Controller) *MockExchangeServiceHandler {
	mock := &MockExchangeServiceHandler{ctrl: ctrl}
	mock.recorder = &MockExchangeServiceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangeServiceHandler) EXPECT() *MockExchangeServiceHandlerMockRecorder {
	return m.recorder
}

// ExchangeCurrency mocks base method.
func (m *MockExchangeServiceHandler) ExchangeCurrency(arg0 context.Context, arg1 *connect.Request[v1.ExchangeCurrencyRequest]) (*connect.Response[v1.ExchangeCurrencyResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExchangeCurrency", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.ExchangeCurrencyResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExchangeCurrency indicates an expected call of ExchangeCurrency.
func (mr *MockExchangeServiceHandlerMockRecorder) ExchangeCurrency(arg0, arg1 interface{}) *ExchangeServiceHandlerExchangeCurrencyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExchangeCurrency", reflect.TypeOf((*MockExchangeServiceHandler)(nil).ExchangeCurrency), arg0, arg1)
	return &ExchangeServiceHandlerExchangeCurrencyCall{Call: call}
}

// ExchangeServiceHandlerExchangeCurrencyCall wrap *gomock.Call
type ExchangeServiceHandlerExchangeCurrencyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *ExchangeServiceHandlerExchangeCurrencyCall) Return(arg0 *connect.Response[v1.ExchangeCurrencyResponse], arg1 error) *ExchangeServiceHandlerExchangeCurrencyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *ExchangeServiceHandlerExchangeCurrencyCall) Do(f func(context.Context, *connect.Request[v1.ExchangeCurrencyRequest]) (*connect.Response[v1.ExchangeCurrencyResponse], error)) *ExchangeServiceHandlerExchangeCurrencyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *ExchangeServiceHandlerExchangeCurrencyCall) DoAndReturn(f func(context.Context, *connect.Request[v1.ExchangeCurrencyRequest]) (*connect.Response[v1.ExchangeCurrencyResponse], error)) *ExchangeServiceHandlerExchangeCurrencyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
