// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: gomoneypb/exchange/v1/exchange.proto

package exchangev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/ft-t/go-money-pb/gen/gomoneypb/exchange/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ExchangeServiceName is the fully-qualified name of the ExchangeService service.
	ExchangeServiceName = "gomoneypb.exchange.v1.ExchangeService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ExchangeServiceExchangeCurrencyProcedure is the fully-qualified name of the ExchangeService's
	// ExchangeCurrency RPC.
	ExchangeServiceExchangeCurrencyProcedure = "/gomoneypb.exchange.v1.ExchangeService/ExchangeCurrency"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	exchangeServiceServiceDescriptor                = v1.File_gomoneypb_exchange_v1_exchange_proto.Services().ByName("ExchangeService")
	exchangeServiceExchangeCurrencyMethodDescriptor = exchangeServiceServiceDescriptor.Methods().ByName("ExchangeCurrency")
)

// ExchangeServiceClient is a client for the gomoneypb.exchange.v1.ExchangeService service.
type ExchangeServiceClient interface {
	ExchangeCurrency(context.Context, *connect.Request[v1.ExchangeCurrencyRequest]) (*connect.Response[v1.ExchangeCurrencyResponse], error)
}

// NewExchangeServiceClient constructs a client for the gomoneypb.exchange.v1.ExchangeService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewExchangeServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ExchangeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &exchangeServiceClient{
		exchangeCurrency: connect.NewClient[v1.ExchangeCurrencyRequest, v1.ExchangeCurrencyResponse](
			httpClient,
			baseURL+ExchangeServiceExchangeCurrencyProcedure,
			connect.WithSchema(exchangeServiceExchangeCurrencyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// exchangeServiceClient implements ExchangeServiceClient.
type exchangeServiceClient struct {
	exchangeCurrency *connect.Client[v1.ExchangeCurrencyRequest, v1.ExchangeCurrencyResponse]
}

// ExchangeCurrency calls gomoneypb.exchange.v1.ExchangeService.ExchangeCurrency.
func (c *exchangeServiceClient) ExchangeCurrency(ctx context.Context, req *connect.Request[v1.ExchangeCurrencyRequest]) (*connect.Response[v1.ExchangeCurrencyResponse], error) {
	return c.exchangeCurrency.CallUnary(ctx, req)
}

// ExchangeServiceHandler is an implementation of the gomoneypb.exchange.v1.ExchangeService service.
type ExchangeServiceHandler interface {
	ExchangeCurrency(context.Context, *connect.Request[v1.ExchangeCurrencyRequest]) (*connect.Response[v1.ExchangeCurrencyResponse], error)
}

// NewExchangeServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewExchangeServiceHandler(svc ExchangeServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	exchangeServiceExchangeCurrencyHandler := connect.NewUnaryHandler(
		ExchangeServiceExchangeCurrencyProcedure,
		svc.ExchangeCurrency,
		connect.WithSchema(exchangeServiceExchangeCurrencyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/gomoneypb.exchange.v1.ExchangeService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ExchangeServiceExchangeCurrencyProcedure:
			exchangeServiceExchangeCurrencyHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedExchangeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedExchangeServiceHandler struct{}

func (UnimplementedExchangeServiceHandler) ExchangeCurrency(context.Context, *connect.Request[v1.ExchangeCurrencyRequest]) (*connect.Response[v1.ExchangeCurrencyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("gomoneypb.exchange.v1.ExchangeService.ExchangeCurrency is not implemented"))
}
