// Code generated by MockGen. DO NOT EDIT.
// Source: ./gomoneypb/transactions/v1/transactionsv1connect/transactions.connect.go

// Package transactionsv1connect is a generated GoMock package.
package transactionsv1connect

import (
	context "context"
	reflect "reflect"

	connect "connectrpc.com/connect"
	v1 "github.com/ft-t/go-money-pb/gen/gomoneypb/transactions/v1"
	gomock "github.com/golang/mock/gomock"
)

// MockTransactionsServiceClient is a mock of TransactionsServiceClient interface.
type MockTransactionsServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionsServiceClientMockRecorder
}

// MockTransactionsServiceClientMockRecorder is the mock recorder for MockTransactionsServiceClient.
type MockTransactionsServiceClientMockRecorder struct {
	mock *MockTransactionsServiceClient
}

// NewMockTransactionsServiceClient creates a new mock instance.
func NewMockTransactionsServiceClient(ctrl *gomock.Controller) *MockTransactionsServiceClient {
	mock := &MockTransactionsServiceClient{ctrl: ctrl}
	mock.recorder = &MockTransactionsServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionsServiceClient) EXPECT() *MockTransactionsServiceClientMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockTransactionsServiceClient) CreateTransaction(arg0 context.Context, arg1 *connect.Request[v1.CreateTransactionRequest]) (*connect.Response[v1.CreateTransactionResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.CreateTransactionResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockTransactionsServiceClientMockRecorder) CreateTransaction(arg0, arg1 interface{}) *TransactionsServiceClientCreateTransactionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockTransactionsServiceClient)(nil).CreateTransaction), arg0, arg1)
	return &TransactionsServiceClientCreateTransactionCall{Call: call}
}

// TransactionsServiceClientCreateTransactionCall wrap *gomock.Call
type TransactionsServiceClientCreateTransactionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionsServiceClientCreateTransactionCall) Return(arg0 *connect.Response[v1.CreateTransactionResponse], arg1 error) *TransactionsServiceClientCreateTransactionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionsServiceClientCreateTransactionCall) Do(f func(context.Context, *connect.Request[v1.CreateTransactionRequest]) (*connect.Response[v1.CreateTransactionResponse], error)) *TransactionsServiceClientCreateTransactionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionsServiceClientCreateTransactionCall) DoAndReturn(f func(context.Context, *connect.Request[v1.CreateTransactionRequest]) (*connect.Response[v1.CreateTransactionResponse], error)) *TransactionsServiceClientCreateTransactionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTransactionsServiceHandler is a mock of TransactionsServiceHandler interface.
type MockTransactionsServiceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionsServiceHandlerMockRecorder
}

// MockTransactionsServiceHandlerMockRecorder is the mock recorder for MockTransactionsServiceHandler.
type MockTransactionsServiceHandlerMockRecorder struct {
	mock *MockTransactionsServiceHandler
}

// NewMockTransactionsServiceHandler creates a new mock instance.
func NewMockTransactionsServiceHandler(ctrl *gomock.Controller) *MockTransactionsServiceHandler {
	mock := &MockTransactionsServiceHandler{ctrl: ctrl}
	mock.recorder = &MockTransactionsServiceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionsServiceHandler) EXPECT() *MockTransactionsServiceHandlerMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockTransactionsServiceHandler) CreateTransaction(arg0 context.Context, arg1 *connect.Request[v1.CreateTransactionRequest]) (*connect.Response[v1.CreateTransactionResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.CreateTransactionResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockTransactionsServiceHandlerMockRecorder) CreateTransaction(arg0, arg1 interface{}) *TransactionsServiceHandlerCreateTransactionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockTransactionsServiceHandler)(nil).CreateTransaction), arg0, arg1)
	return &TransactionsServiceHandlerCreateTransactionCall{Call: call}
}

// TransactionsServiceHandlerCreateTransactionCall wrap *gomock.Call
type TransactionsServiceHandlerCreateTransactionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *TransactionsServiceHandlerCreateTransactionCall) Return(arg0 *connect.Response[v1.CreateTransactionResponse], arg1 error) *TransactionsServiceHandlerCreateTransactionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *TransactionsServiceHandlerCreateTransactionCall) Do(f func(context.Context, *connect.Request[v1.CreateTransactionRequest]) (*connect.Response[v1.CreateTransactionResponse], error)) *TransactionsServiceHandlerCreateTransactionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *TransactionsServiceHandlerCreateTransactionCall) DoAndReturn(f func(context.Context, *connect.Request[v1.CreateTransactionRequest]) (*connect.Response[v1.CreateTransactionResponse], error)) *TransactionsServiceHandlerCreateTransactionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
